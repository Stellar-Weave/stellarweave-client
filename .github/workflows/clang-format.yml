name: Clang Format Check

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'src/**/*.cc'
      - 'src/**/*.h'
      - 'include/**/*.h'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**/*.cc'
      - 'src/**/*.h'
      - 'include/**/*.h'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  format-check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4 # Pinning to @v4 is generally stable, but consider @v4.0.0 for stricter pinning if needed

      # Runs a single command using the runners shell
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      # Find all relevant C++ files
      - name: Find C++ Files
        id: find_files # Give this step an ID to output a variable
        run: |
          # The 'find' command generates a list of files, one per line.
          # We store this in an environment variable for the next step.
          FILES=$(find src include -type f \( -name "*.cc" -o -name "*.h" \))
          echo "Found files to check:"
          echo "$FILES"
          # Set an output for the next step to consume
          echo "cpp_files=$FILES" >> "$GITHUB_OUTPUT"

      # Run clang-format to apply formatting changes and then check for differences
      - name: Check for Formatting Differences
        # Use the output from the previous step
        env:
          FILES_TO_CHECK: ${{ steps.find_files.outputs.cpp_files }}
        run: |
          if [ -z "$FILES_TO_CHECK" ]; then
            echo "No C++ files found to format. Skipping clang-format check."
            exit 0
          fi

          echo "Applying clang-format (in-place) to check for diffs..."
          # Run clang-format in-place. If there are changes, 'git diff' will detect them.
          # We use xargs to handle potentially large number of files.
          echo "$FILES_TO_CHECK" | xargs clang-format -i

          echo "Checking for uncommitted changes after formatting..."
          # git diff --exit-code will exit with 1 if there are differences,
          # causing the GitHub Action to fail.
          git diff --exit-code

          echo "Code is correctly formatted!"
